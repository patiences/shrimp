use std::str::FromStr;
use ast::{Expression, Statement, Program};

grammar; 

pub Program: Box<Program> = {
    <s:(Statement)*> "print" <e:Expression> => Box::new(Program{statements : s,
    print : e})
};

Statement: Box<Statement> = {
    Assign,
};

Assign: Box<Statement> = {
    <Identifier> "=" <Expression> => Box::new(Statement::Assign(<>))
};

Identifier: String = {
    IDENTIFIER
};

ExpressionList: Vec<Box<Expression>> = {
    <e:Expression> <elist:("," <Expression>)*> => match elist {
        None => vec![e],
        Some(elist) => {
            let mut v = vec![e];
            for e in elist {
                v.push(e);
            }
            v
        }
    }
};

Expression: Box<Expression> = {
    <CompExpression> "?" <Expression> ":" <Expression> => Box::new(Expression::Conditional(<>)),
    CompExpression, 
};

CompExpression: Box<Expression> = {
    <AddExpression> "<" <AddExpression> => Box::new(Expression::LessThan(<>)),
    AddExpression,
};

AddExpression: Box<Expression> = { 
    <MultExpression> "+" <MultExpression> => Box::new(Expression::Plus(<>)),
    <MultExpression> "-" <MultExpression> => Box::new(Expression::Minus(<>)),
    MultExpression, 
};

MultExpression: Box<Expression> = {
    <NotExpression> "*" <NotExpression> => Box::new(Expression::Times(<>)),
    NotExpression,
};

NotExpression: Box<Expression> = {
    "!" <NotExpression> => Box::new(Expression::Not(<>)),
    PrimaryExpression,
};

// Expressions with the highest precedence 
PrimaryExpression: Box<Expression> = {
    INTEGER_LITERAL => Box::new(Expression::IntegerLiteral(<>)), 
    Identifier => Box::new(Expression::IdentifierExp(<>)), 
    "(" <Expression> ")",  
};

// Tokens 
INTEGER_LITERAL: i32 = {
    (DIGIT)+ => i32::from_str(<>).unwrap(), // 1 or more digits 
}; 

//IDENTIFIER: String = {
//    r"[A-Z, a-z]?_?[0-9]?",
//    (LETTER? "_"? DIGIT?)* => {
//        let s = <>.join("");
//        s
//    }

//    <l:LETTER> <rest:(LETTER* "_"* DIGIT*)*> => {
//        let mut s = str::from(l);
//        for letter in rest {
//            s.push(letter);
//        }
//        s
//    }
//}; 

IDENTIFIER: String = {
//    (LETTER* "_"* DIGIT*)* => {
//        let s = <>.join("");
//        s
//    }
    r"[a-zA-Z][a-zA-Z0-9_]*",
};

//LETTER: String = { 
//    r"[a-zA-Z]", 
//};  

DIGIT: String = { 
    r"[0-9]", 
};
