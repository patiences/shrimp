use std::str::FromStr;
use ast::{Expression, Statement, Program};

grammar;

pub Program: Box<Program> = {
    <s:(Statement)*> "print" <e:Expression> =>
        Box::new(Program { statements: s, print: e })
};

Statement: Box<Statement> = {
    Assign,
};

Assign: Box<Statement> = {
    <Identifier> "=" <Expression> => Box::new(Statement::Assign(<>))
};

Identifier: String = {
    IDENTIFIER
};

ExpressionList: Vec<Box<Expression>> = {
    <elist:(<Expression> ",")*> <e:Expression?> => match e {
        None => elist,
        Some(e) => {
            let mut elist = elist;
            elist.push(e);
            elist
        }
    }
};

Expression: Box<Expression> = {
    <CompExpression> "?" <Expression> ":" <Expression> => Box::new(Expression::Conditional(<>)),
    CompExpression,
};

CompExpression: Box<Expression> = {
    <AddExpression> "<" <AddExpression> => Box::new(Expression::LessThan(<>)),
    AddExpression,
};

AddExpression: Box<Expression> = {
    <MultExpression> "+" <MultExpression> => Box::new(Expression::Plus(<>)),
    <MultExpression> "-" <MultExpression> => Box::new(Expression::Minus(<>)),
    MultExpression,
};

MultExpression: Box<Expression> = {
    <NotExpression> "*" <NotExpression> => Box::new(Expression::Times(<>)),
    NotExpression,
};

NotExpression: Box<Expression> = {
    "!" <NotExpression> => Box::new(Expression::Not(<>)),
    PrimaryExpression,
};

// Expressions with the highest precedence
PrimaryExpression: Box<Expression> = {
    INTEGER_LITERAL => Box::new(Expression::IntegerLiteral(<>)),
    Identifier => Box::new(Expression::IdentifierExp(<>)),
    "(" <Expression> ")",
};

INTEGER_LITERAL: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};

IDENTIFIER: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => { // FIXME should allow 1abc... how to do this w/o ambiguity?
        let s = <>.to_string();
        s
    },
};
